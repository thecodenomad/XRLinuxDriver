name: "CI/CD"

# Controls when the action will run. Triggers the workflow on push or pull request events but only for the master branch
on:
  push:
    branches-ignore:
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Builds:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        container:
          - "fedora"
          - "ubuntu"
    #          - "debian"

    container: ${{ matrix.container }}:latest

    steps:
      - name: Install Fedora Dependencies
        if: ${{ matrix.container == 'fedora' }}
        run: |
          dnf install -y cmake gcc git libusb1 libgudev-devel libusbx-devel libevdev-devel openssl-devel json-c-devel libpsl libssh2 python3 python3-pip
          pip3 install pyaml

      - name: Install Ubuntu/Debian Dependencies
        if: ${{ matrix.container == 'ubuntu' || matrix.container == 'debian' }}
        run: |
          TZ="Etc/UTC"
          DEBIAN_FRONTEND=noninteractive
          ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
          apt update -y
          apt install -y cmake gcc git libusb-1.0-0-dev libgudev-1.0-dev libevdev-dev openssl libjson-c-dev libpsl-dev libssh2-1-dev python3 python3-pip python3-yaml

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build
        run: |
          # Build
          mkdir -p build
          cd build
          cmake ..

      - name: Package
        env:
          UA_API_SECRET_INTENTIONALLY_EMPTY: 1
        run: |
          # Build
          ./bin/package
          mv build/xrealAirLinuxDriver.tar build/xrealAirLinuxDriver-${{matrix.container}}.tar

      - name: Add Tarball Artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{matrix.container}}
          path: build/xrealAirLinuxDriver-${{matrix.container}}.tar

  Release-Latest:
    runs-on: ubuntu-latest
    needs: [Builds]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      ##################################
      # Download all created artifacts #
      ##################################

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: build-artifacts-*
          merge-multiple: true

      #      - name: Download Fedora Driver
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: xrealAirLinuxDriver-fedora-latest.tar.gz
      #          path: artifacts/xrealAirLinuxDriver-fedora-latest.tar.gz
      #
      #      - name: Download Ubuntu Driver
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: xrealAirLinuxDriver-ubuntu-latest.tar.gz
      #          path: artifacts/xrealAirLinuxDriver-ubuntu-latest.tar.gz
      #
      #      - name: Download Debian Driver
      #        uses: actions/download-artifact@v4
      #        with:
      #          name: xrealAirLinuxDriver-debian-latest.tar.gz
      #          path: artifacts/xrealAirLinuxDriver-debian-latest.tar.gz

      #########################
      # Create Latest Release #
      #########################
      - name: List folder contents
        run: |
          ls -al
          ls -al artifacts
          pwd

      - name: Create Latest Release
        if: ${{ !env.ACT }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/xrealAirLinuxDriver-*.tar,bin/xreal_driver_setup"
          allowUpdates: true
          tag: latest
#      - name: Add Tarball Artifact
#        if: ${{ !env.ACT }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: xrealAirLinuxDriver-${{matrix.container}}.tar.gz
#          path: build/xrealAirLinuxDriver.tar.gz
#          compression-level: 0
#
#      - name: Add Driver Setup Script
#        if: ${{ !env.ACT && matrix.container == 'fedora' }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: xreal_driver_setup
#          path: bin/xreal_driver_setup
#          compression-level: 0
